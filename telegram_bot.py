# telegram_bot.py
import os
import logging
import json
import datetime
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from io import BytesIO
import numpy as np
import threading
import time
import sqlite3
from utils import *

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è python-telegram-bot v20+
from telegram import Bot
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, CallbackContext


class TelegramNotifier:
    def __init__(self, token=BOT_TOKEN):
        self.bot = Bot(token=token)
        self.logger = logging.getLogger('TelegramNotifier')

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        self.last_data = None
        # –ú–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        self.last_data_timestamp = None

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs('graphs', exist_ok=True)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
        self.app = None
        self.initialize_bot_commands()

    def initialize_bot_commands(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥
            application = Application.builder().token(BOT_TOKEN).build()

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status
            application.add_handler(CommandHandler("status", self.command_status))
            application.add_handler(CommandHandler("start", self.command_start))
            application.add_handler(CommandHandler("help", self.command_help))

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º event loop
            def run_bot():
                import asyncio
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                loop.run_until_complete(application.run_polling(close_loop=False))

            threading.Thread(target=run_bot, daemon=True).start()

            self.app = application
            self.logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: {e}")

    async def command_start(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await update.message.reply_text(
            f"üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è –≤ —Ç—Ä–µ—Ö—Ñ–∞–∑–Ω–æ–π —Å–µ—Ç–∏.\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"/status - –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è\n"
            f"/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
        )

    async def command_help(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        await update.message.reply_text(
            f"üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:\n\n"
            f"–≠—Ç–æ—Ç –±–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–π —Å–µ—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è "
            f"–æ —Å–∫–∞—á–∫–∞—Ö –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è –∏ –¥—Ä—É–≥–∏—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è—Ö.\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"/status - –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è\n"
            f"/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
        )

    async def command_status(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        chat_id = update.effective_chat.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
        if not self.last_data or not self.last_data_timestamp:
            await self.bot.send_message(
                chat_id=chat_id,
                text="‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏–∏."
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ª–∏ –¥–∞–Ω–Ω—ã–µ (–±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç)
        time_diff = time.time() - self.last_data_timestamp
        if time_diff > 300:  # 5 –º–∏–Ω—É—Ç = 300 —Å–µ–∫—É–Ω–¥
            await self.bot.send_message(
                chat_id=chat_id,
                text=f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã {datetime.timedelta(seconds=int(time_diff))} –Ω–∞–∑–∞–¥.\n–í–æ–∑–º–æ–∂–Ω–æ, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç."
            )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        message = self.format_status_message(self.last_data)
        await self.bot.send_message(
            chat_id=chat_id,
            text=message,
            parse_mode=ParseMode.HTML
        )
    def update_last_data(self, data):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏—è"""
        self.last_data = data
        self.last_data_timestamp = time.time()

    def format_status_message(self, data):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ"""
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        timestamp = datetime.datetime.fromtimestamp(self.last_data_timestamp).strftime('%d.%m.%Y %H:%M:%S')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–π –≤ –¥–∞–Ω–Ω—ã—Ö
        voltage1 = data.get('voltage1', 0)
        voltage2 = data.get('voltage2', 0)
        voltage3 = data.get('voltage3', 0)
        current1 = data.get('current1', 0)
        current2 = data.get('current2', 0)
        current3 = data.get('current3', 0)
        power1 = data.get('power1', 0)
        power2 = data.get('power2', 0)
        power3 = data.get('power3', 0)
        total_power = data.get('total_power', 0)

        # –í—ã—á–∏—Å–ª—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –ø—Ä–µ–¥–µ–ª—ã
        voltage_min = VOLTAGE_NOMINAL * (1 - VOLTAGE_TOLERANCE)
        voltage_max = VOLTAGE_NOMINAL * (1 + VOLTAGE_TOLERANCE)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è
        voltage_status = []
        if voltage1 < voltage_min or voltage1 > voltage_max:
            voltage_status.append(f"–§–∞–∑–∞ 1: {EMOJI['warning']} {voltage1:.1f}–í")
        else:
            voltage_status.append(f"–§–∞–∑–∞ 1: {EMOJI['check']} {voltage1:.1f}–í")

        if voltage2 < voltage_min or voltage2 > voltage_max:
            voltage_status.append(f"–§–∞–∑–∞ 2: {EMOJI['warning']} {voltage2:.1f}–í")
        else:
            voltage_status.append(f"–§–∞–∑–∞ 2: {EMOJI['check']} {voltage2:.1f}–í")

        if voltage3 < voltage_min or voltage3 > voltage_max:
            voltage_status.append(f"–§–∞–∑–∞ 3: {EMOJI['warning']} {voltage3:.1f}–í")
        else:
            voltage_status.append(f"–§–∞–∑–∞ 3: {EMOJI['check']} {voltage3:.1f}–í")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–∫–æ—Å—ã –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è –º–µ–∂–¥—É —Ñ–∞–∑–∞–º–∏
        max_diff_percent = 0
        max_diff_phases = (0, 0)
        voltages = [voltage1, voltage2, voltage3]

        for i in range(3):
            for j in range(i + 1, 3):
                diff_percent = abs(voltages[i] - voltages[j]) / VOLTAGE_NOMINAL
                if diff_percent > max_diff_percent:
                    max_diff_percent = diff_percent
                    max_diff_phases = (i + 1, j + 1)

        phase_imbalance_status = ""
        if max_diff_percent > VOLTAGE_TOLERANCE_BETWEEN_PHASES:
            phase_imbalance_status = (
                f"\n\n{EMOJI['warning']} <b>–ü–µ—Ä–µ–∫–æ—Å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è –º–µ–∂–¥—É —Ñ–∞–∑–∞–º–∏</b>\n"
                f"–ú–µ–∂–¥—É —Ñ–∞–∑–∞–º–∏ {max_diff_phases[0]} –∏ {max_diff_phases[1]}: "
                f"{max_diff_percent * 100:.1f}% (–ø–æ—Ä–æ–≥: {VOLTAGE_TOLERANCE_BETWEEN_PHASES * 100:.1f}%)"
            )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"{EMOJI['clock']} <b>–°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ - {timestamp}</b>\n\n"
            f"<b>–¢–µ–∫—É—â–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ:</b>\n"
            f"{voltage_status[0]}\n"
            f"{voltage_status[1]}\n"
            f"{voltage_status[2]}\n\n"
            f"<b>–¢–µ–∫—É—â–∞—è –º–æ—â–Ω–æ—Å—Ç—å:</b>\n"
            f"–§–∞–∑–∞ 1: {power1:.1f}–í—Ç ({current1:.2f}–ê)\n"
            f"–§–∞–∑–∞ 2: {power2:.1f}–í—Ç ({current2:.2f}–ê)\n"
            f"–§–∞–∑–∞ 3: {power3:.1f}–í—Ç ({current3:.2f}–ê)\n"
            f"–í—Å–µ–≥–æ: {total_power:.1f}–í—Ç"
            f"{phase_imbalance_status}"
        )

        return message

    def format_hourly_report(self, stats):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        report_time = datetime.datetime.now().strftime('%d.%m.%Y %H:%M')

        message = (
            f"{EMOJI['clock']} <b>–ß–∞—Å–æ–≤–æ–π –æ—Ç—á–µ—Ç - {report_time}</b>\n\n"
            f"<b>–°—Ä–µ–¥–Ω–∏–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è:</b>\n"
            f"–§–∞–∑–∞ 1: {stats['avg_voltage1']:.1f}–í\n"
            f"–§–∞–∑–∞ 2: {stats['avg_voltage2']:.1f}–í\n"
            f"–§–∞–∑–∞ 3: {stats['avg_voltage3']:.1f}–í\n\n"
            f"<b>–°—Ä–µ–¥–Ω–∏–µ –º–æ—â–Ω–æ—Å—Ç–∏:</b>\n"
            f"–§–∞–∑–∞ 1: {stats['avg_power1']:.1f}–í—Ç\n"
            f"–§–∞–∑–∞ 2: {stats['avg_power2']:.1f}–í—Ç\n"
            f"–§–∞–∑–∞ 3: {stats['avg_power3']:.1f}–í—Ç\n\n"
            f"<b>–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏:</b> {stats['total_energy']:.3f} –∫–í—Ç¬∑—á\n"
            f"<b>–°–æ–±—ã—Ç–∏–π –∑–∞ —á–∞—Å:</b> {stats['events_count']}"
        )

        return message

    def format_daily_report(self, stats):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—Ç–æ—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        report_time = datetime.datetime.now().strftime('%d.%m.%Y')

        message = (
            f"{EMOJI['calendar']} <b>–°—É—Ç–æ—á–Ω—ã–π –æ—Ç—á–µ—Ç - {report_time}</b>\n\n"
            f"<b>–°—Ä–µ–¥–Ω–∏–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è:</b>\n"
            f"–§–∞–∑–∞ 1: {stats['avg_voltage1']:.1f}–í (–º–∏–Ω: {stats['min_voltage1']:.1f}–í, –º–∞–∫—Å: {stats['max_voltage1']:.1f}–í)\n"
            f"–§–∞–∑–∞ 2: {stats['avg_voltage2']:.1f}–í (–º–∏–Ω: {stats['min_voltage2']:.1f}–í, –º–∞–∫—Å: {stats['max_voltage2']:.1f}–í)\n"
            f"–§–∞–∑–∞ 3: {stats['avg_voltage3']:.1f}–í (–º–∏–Ω: {stats['min_voltage3']:.1f}–í, –º–∞–∫—Å: {stats['max_voltage3']:.1f}–í)\n\n"
            f"<b>–°—Ä–µ–¥–Ω–∏–µ –º–æ—â–Ω–æ—Å—Ç–∏:</b>\n"
            f"–§–∞–∑–∞ 1: {stats['avg_power1']:.1f}–í—Ç\n"
            f"–§–∞–∑–∞ 2: {stats['avg_power2']:.1f}–í—Ç\n"
            f"–§–∞–∑–∞ 3: {stats['avg_power3']:.1f}–í—Ç\n\n"
            f"<b>–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏:</b> {stats['total_energy']:.3f} –∫–í—Ç¬∑—á\n\n"
            f"<b>–°–æ–±—ã—Ç–∏—è –∑–∞ —Å—É—Ç–∫–∏:</b>\n"
            f"- –°–∫–∞—á–∫–∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è: {stats['voltage_spikes_count']}\n"
            f"- –ü–µ—Ä–µ–∫–æ—Å—ã –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è: {stats['phase_imbalance_count']}\n"
            f"- –ù–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {stats['current_imbalance_count']}"
        )

        return message

    def generate_daily_voltage_graph(self, device_id):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è –∑–∞ —Å—É—Ç–∫–∏"""
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏
        # –í—ã—á–∏—Å–ª—è–µ–º timestamp –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
        start_time = int((datetime.datetime.now() - datetime.timedelta(days=1)).timestamp())

        cursor.execute('''
        SELECT 
            unix_time, avg_voltage1, avg_voltage2, avg_voltage3,
            avg_power1, avg_power2, avg_power3,
            total_energy
        FROM hourly_stats
        WHERE device_id = ? AND unix_time >= ?
        ORDER BY unix_time ASC
        ''', (device_id, start_time))

        data = cursor.fetchall()
        conn.close()

        if not data or len(data) < 2:
            self.logger.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
            return None

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        timestamps = [datetime.datetime.fromtimestamp(row[0]) for row in data]
        voltage1 = [row[1] for row in data]
        voltage2 = [row[2] for row in data]
        voltage3 = [row[3] for row in data]

        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        plt.figure(figsize=(10, 6))
        plt.plot(timestamps, voltage1, label='–§–∞–∑–∞ 1', color='blue')
        plt.plot(timestamps, voltage2, label='–§–∞–∑–∞ 2', color='green')
        plt.plot(timestamps, voltage3, label='–§–∞–∑–∞ 3', color='red')

        # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è –ø—Ä–µ–¥–µ–ª–æ–≤
        plt.axhline(y=VOLTAGE_NOMINAL * (1 + VOLTAGE_TOLERANCE), color='gray', linestyle='--', alpha=0.7)
        plt.axhline(y=VOLTAGE_NOMINAL, color='black', linestyle='-', alpha=0.5)
        plt.axhline(y=VOLTAGE_NOMINAL * (1 - VOLTAGE_TOLERANCE), color='gray', linestyle='--', alpha=0.7)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–∏ –∏ –º–µ—Ç–∫–∏
        plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))
        plt.gcf().autofmt_xdate()
        plt.title('–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –ø–æ —Ñ–∞–∑–∞–º –∑–∞ —Å—É—Ç–∫–∏')
        plt.xlabel('–í—Ä–µ–º—è')
        plt.ylabel('–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ (–í)')
        plt.legend()
        plt.grid(True, alpha=0.3)
        plt.tight_layout()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
        buf = BytesIO()
        plt.savefig(buf, format='png', dpi=100)
        buf.seek(0)
        plt.close()

        return buf

    def generate_daily_power_graph(self, device_id):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –º–æ—â–Ω–æ—Å—Ç–∏ –∑–∞ —Å—É—Ç–∫–∏"""
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏
        # –í—ã—á–∏—Å–ª—è–µ–º timestamp –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
        start_time = int((datetime.datetime.now() - datetime.timedelta(days=1)).timestamp())

        cursor.execute('''
        SELECT 
            unix_time, avg_voltage1, avg_voltage2, avg_voltage3,
            avg_power1, avg_power2, avg_power3,
            total_energy
        FROM hourly_stats
        WHERE device_id = ? AND unix_time >= ?
        ORDER BY unix_time ASC
        ''', (device_id, start_time))

        data = cursor.fetchall()
        conn.close()

        if not data or len(data) < 2:
            self.logger.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
            return None

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        timestamps = [datetime.datetime.fromtimestamp(row[0]) for row in data]
        power1 = [row[4] for row in data]
        power2 = [row[5] for row in data]
        power3 = [row[6] for row in data]

        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        plt.figure(figsize=(10, 6))
        plt.plot(timestamps, power1, label='–§–∞–∑–∞ 1', color='blue')
        plt.plot(timestamps, power2, label='–§–∞–∑–∞ 2', color='green')
        plt.plot(timestamps, power3, label='–§–∞–∑–∞ 3', color='red')

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–∏ –∏ –º–µ—Ç–∫–∏
        plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))
        plt.gcf().autofmt_xdate()
        plt.title('–ú–æ—â–Ω–æ—Å—Ç—å –ø–æ —Ñ–∞–∑–∞–º –∑–∞ —Å—É—Ç–∫–∏')
        plt.xlabel('–í—Ä–µ–º—è')
        plt.ylabel('–ú–æ—â–Ω–æ—Å—Ç—å (–í—Ç)')
        plt.legend()
        plt.grid(True, alpha=0.3)
        plt.tight_layout()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
        buf = BytesIO()
        plt.savefig(buf, format='png', dpi=100)
        buf.seek(0)
        plt.close()

        return buf

    async def send_event_notifications(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–±—ã—Ç–∏—è—Ö"""
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (–∫—Ä–æ–º–µ –ø–µ—Ä–µ–∫–æ—Å–æ–≤ —Ç–æ–∫–∞)
        cursor.execute('''
        SELECT id, device_id, timestamp, event_type, details, unix_time 
        FROM events 
        WHERE notified = 0 AND event_type != 'current_imbalance'
        ORDER BY unix_time ASC
        ''')

        events = cursor.fetchall()

        if not events:
            conn.close()
            return

        event_ids = []

        for event in events:
            event_id, device_id, timestamp, event_type, details_str, unix_time = event
            event_ids.append(event_id)
            details = json.loads(details_str)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self.format_event_message(event)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–±—ã—Ç–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º (–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ = 0 –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ 0)
            is_critical = False
            if event_type == 'voltage_spike':
                value = details.get('value', 0)
                # –°—á–∏—Ç–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º, –µ—Å–ª–∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –±–ª–∏–∑–∫–æ –∫ –Ω—É–ª—é (–º–µ–Ω—å—à–µ 10–í)
                if value < 10:
                    is_critical = True

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            await self.send_message(ADMIN_CHAT_ID, message)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è
            if is_critical:
                for user_id in USER_CHAT_IDS:
                    await self.send_message(user_id, message)

        # –û—Ç–º–µ—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
        if event_ids:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            params = ','.join(['?' for _ in event_ids])

            cursor.execute(f'''
            UPDATE events SET notified = 1 
            WHERE id IN ({params})
            ''', event_ids)

            conn.commit()

        # –¢–∞–∫–∂–µ –æ—Ç–º–µ—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–µ—Ä–µ–∫–æ—Å–∞—Ö —Ç–æ–∫–∞ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ,
        # –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
        cursor.execute('''
        UPDATE events SET notified = 1 
        WHERE notified = 0 AND event_type = 'current_imbalance'
        ''')
        conn.commit()

        conn.close()

        # –¢–∞–∫–∂–µ –æ—Ç–º–µ—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–µ—Ä–µ–∫–æ—Å–∞—Ö —Ç–æ–∫–∞ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ,
        # –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
        cursor.execute('''
        UPDATE events SET notified = 1 
        WHERE notified = 0 AND event_type = 'current_imbalance'
        ''')
        conn.commit()

        conn.close()

    async def send_hourly_report(self, stats):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = self.format_hourly_report(stats)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É
        await self.send_message(ADMIN_CHAT_ID, message)

    async def send_daily_report(self, stats, device_id):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—É—Ç–æ—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = self.format_daily_report(stats)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        voltage_graph = self.generate_daily_voltage_graph(device_id)
        power_graph = self.generate_daily_power_graph(device_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
        await self.send_message(ADMIN_CHAT_ID, message)

        if voltage_graph:
            await self.send_graph(ADMIN_CHAT_ID, voltage_graph, caption=f"{EMOJI['graph']} –ì—Ä–∞—Ñ–∏–∫ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è –∑–∞ —Å—É—Ç–∫–∏")

        if power_graph:
            await self.send_graph(ADMIN_CHAT_ID, power_graph, caption=f"{EMOJI['graph']} –ì—Ä–∞—Ñ–∏–∫ –º–æ—â–Ω–æ—Å—Ç–∏ –∑–∞ —Å—É—Ç–∫–∏")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        for user_id in USER_CHAT_IDS:
            await self.send_message(user_id, message)

            if voltage_graph:
                await self.send_graph(user_id, voltage_graph, caption=f"{EMOJI['graph']} –ì—Ä–∞—Ñ–∏–∫ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è –∑–∞ —Å—É—Ç–∫–∏")

            if power_graph:
                await self.send_graph(user_id, power_graph, caption=f"{EMOJI['graph']} –ì—Ä–∞—Ñ–∏–∫ –º–æ—â–Ω–æ—Å—Ç–∏ –∑–∞ —Å—É—Ç–∫–∏")

    def start_notification_thread(self, check_interval=30):
        """–ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

        def notification_worker():
            while True:
                try:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                    import asyncio
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)

                    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    loop.run_until_complete(self.send_event_notifications())

                    time.sleep(check_interval)
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
                    time.sleep(60)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –¥–æ–ª—å—à–µ

        thread = threading.Thread(target=notification_worker, daemon=True)
        thread.start()

        return thread